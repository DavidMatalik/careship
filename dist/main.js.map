{"version":3,"sources":["webpack://careship/./node_modules/pubsub-js/src/pubsub.js","webpack://careship/./node_modules/uniqid/index.js","webpack://careship/./src/gameLogic.js","webpack://careship/./src/gameView.js","webpack://careship/./src/gameboardFactory.js","webpack://careship/./src/playerFactory.js","webpack://careship/./src/shipFactory.js","webpack://careship/webpack/bootstrap","webpack://careship/webpack/runtime/compat get default export","webpack://careship/webpack/runtime/define property getters","webpack://careship/webpack/runtime/hasOwnProperty shorthand","webpack://careship/webpack/runtime/make namespace object","webpack://careship/webpack/runtime/node module decorator","webpack://careship/./src/index.js"],"names":[],"mappings":";;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAQ,IAA2B;AACnC;AACA,8CAA8C;AAC9C;AACA,QAAQ,cAAc,UAAU;AAChC,0CAA0C;AAC1C;AACA;AACA;AACA,SAAS,EAGJ;;AAEL,CAAC;AACD;;AAEA,qBAAqB;AACrB;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB,gBAAgB;AAChB,gBAAgB;AAChB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB,gBAAgB;AAChB,gBAAgB;AAChB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,WAAW;AAC1B,gBAAgB;AAChB;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,WAAW;AAC1B,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,oBAAoB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,CAAC;;;;;;;;;;;AChWD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG,KAAyC,CAAC,kC;;AAe7C;AACA;AACA,iBAAiB,sBAAsB,4BAA4B,6FAA6F;AAChK,sBAAsB,4BAA4B,mFAAmF;AACrI,mBAAmB,+BAA+B,6EAA6E;;AAE/H;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;AC1C8B;AACS;AACU;AACN;;AAE3C,iEAAe;AACf;AACA;AACA;AACA;;AAEA;AACA,kBAAkB,0DAAgB,KAAK,iDAAW;AAClD,oBAAoB,0DAAgB,KAAK,iDAAW;;AAEpD;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;;AAEL,IAAI,wDAAc;AAClB,IAAI,wDAAc;AAClB;;AAEA;AACA,aAAa,uDAAa;AAC1B,eAAe,uDAAa;AAC5B;;AAEA;AACA;AACA,IAAI,wDAAc;AAClB;AACA,MAAM,wDAAc;AACpB;;AAEA;AACA,IAAI,wDAAc;AAClB;AACA,MAAM,wDAAc;AACpB;AACA;;AAEA;AACA,IAAI,0DAAgB;AACpB,IAAI,0DAAgB;AACpB,IAAI,0DAAgB;AACpB;;AAEA,UAAU;AACV,CAAC,GAAG;;;;;;;;;;;;;;;;;;;;ACtD0B;AACH;;AAE3B,iEAAe;AACf;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,UAAU;AAC7B,qBAAqB,UAAU;AAC/B;AACA;AACA,kCAAkC,EAAE,EAAE,EAAE;AACxC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,qCAAqC,OAAO;AAC5C;AACA,yBAAyB,qBAAqB,EAAE,OAAO;AACvD;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA,IAAI,wDAAc;AAClB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM,wDAAc;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,0BAA0B,aAAa;AACvC,0BAA0B,cAAc;AACxC,0BAA0B,cAAc;;AAExC;AACA,0BAA0B,aAAa;AACvC,0BAA0B,cAAc;AACxC,0BAA0B,cAAc;;AAExC;AACA,0BAA0B,aAAa;AACvC,0BAA0B,aAAa;;AAEvC;AACA;AACA,yBAAyB,qBAAqB,EAAE,OAAO;AACvD;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA,mBAAmB,YAAY;AAC/B;AACA,oBAAoB,6CAAM;AAC1B;AACA,qCAAqC,KAAK;AAC1C;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM,wDAAc;AACpB;AACA;AACA,gCAAgC,gBAAgB;AAChD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,IAAI,0DAAgB;AACpB,IAAI,0DAAgB;AACpB,IAAI,0DAAgB;AACpB;;AAEA;AACA;AACA;AACA,mBAAmB,yBAAyB;AAC5C,qBAAqB,yBAAyB;AAC9C,4DAA4D,EAAE,EAAE,EAAE;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,yBAAyB;AAC5C,qBAAqB,yBAAyB;AAC9C,4DAA4D,EAAE,EAAE,EAAE;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA,iCAAiC,KAAK;AACtC;AACA;AACA;AACA;AACA;;AAEA,UAAU;AACV,CAAC,GAAG;;;;;;;;;;;;;;;;AChcW;AACf;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,mBAAmB,kBAAkB;AACrC;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,mBAAmB,UAAU;AAC7B;AACA;AACA;;AAEA,UAAU;AACV;;;;;;;;;;;;;;;;ACtDe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;;AAEA,UAAU;AACV;;;;;;;;;;;;;;;;AC7Be;AACf;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,UAAU;AACV;;;;;;;UCfA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCzBA;WACA;WACA;WACA;WACA;WACA,gCAAgC,YAAY;WAC5C;WACA,E;;;;;WCPA;WACA;WACA;WACA;WACA,wCAAwC,yCAAyC;WACjF;WACA;WACA,E;;;;;WCPA,wF;;;;;WCAA;WACA;WACA;WACA,sDAAsD,kBAAkB;WACxE;WACA,+CAA+C,cAAc;WAC7D,E;;;;;WCNA;WACA;WACA;WACA;WACA,E;;;;;;;;;;;;;;ACJyC;AACF;;AAEvC,mDAAmB;AACnB,oDAAoB;;AAEpB;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"main.js","sourcesContent":["/**\n * Copyright (c) 2010,2011,2012,2013,2014 Morgan Roderick http://roderick.dk\n * License: MIT - http://mrgnrdrck.mit-license.org\n *\n * https://github.com/mroderick/PubSubJS\n */\n\n(function (root, factory){\n    'use strict';\n\n    var PubSub = {};\n    root.PubSub = PubSub;\n    factory(PubSub);\n    // CommonJS and Node.js module support\n    if (typeof exports === 'object'){\n        if (module !== undefined && module.exports) {\n            exports = module.exports = PubSub; // Node.js specific `module.exports`\n        }\n        exports.PubSub = PubSub; // CommonJS module 1.1.1 spec\n        module.exports = exports = PubSub; // CommonJS\n    }\n    // AMD support\n    /* eslint-disable no-undef */\n    else if (typeof define === 'function' && define.amd){\n        define(function() { return PubSub; });\n        /* eslint-enable no-undef */\n    }\n\n}(( typeof window === 'object' && window ) || this, function (PubSub){\n    'use strict';\n\n    var messages = {},\n        lastUid = -1,\n        ALL_SUBSCRIBING_MSG = '*';\n\n    function hasKeys(obj){\n        var key;\n\n        for (key in obj){\n            if ( Object.prototype.hasOwnProperty.call(obj, key) ){\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Returns a function that throws the passed exception, for use as argument for setTimeout\n     * @alias throwException\n     * @function\n     * @param { Object } ex An Error object\n     */\n    function throwException( ex ){\n        return function reThrowException(){\n            throw ex;\n        };\n    }\n\n    function callSubscriberWithDelayedExceptions( subscriber, message, data ){\n        try {\n            subscriber( message, data );\n        } catch( ex ){\n            setTimeout( throwException( ex ), 0);\n        }\n    }\n\n    function callSubscriberWithImmediateExceptions( subscriber, message, data ){\n        subscriber( message, data );\n    }\n\n    function deliverMessage( originalMessage, matchedMessage, data, immediateExceptions ){\n        var subscribers = messages[matchedMessage],\n            callSubscriber = immediateExceptions ? callSubscriberWithImmediateExceptions : callSubscriberWithDelayedExceptions,\n            s;\n\n        if ( !Object.prototype.hasOwnProperty.call( messages, matchedMessage ) ) {\n            return;\n        }\n\n        for (s in subscribers){\n            if ( Object.prototype.hasOwnProperty.call(subscribers, s)){\n                callSubscriber( subscribers[s], originalMessage, data );\n            }\n        }\n    }\n\n    function createDeliveryFunction( message, data, immediateExceptions ){\n        return function deliverNamespaced(){\n            var topic = String( message ),\n                position = topic.lastIndexOf( '.' );\n\n            // deliver the message as it is now\n            deliverMessage(message, message, data, immediateExceptions);\n\n            // trim the hierarchy and deliver message to each level\n            while( position !== -1 ){\n                topic = topic.substr( 0, position );\n                position = topic.lastIndexOf('.');\n                deliverMessage( message, topic, data, immediateExceptions );\n            }\n\n            deliverMessage(message, ALL_SUBSCRIBING_MSG, data, immediateExceptions);\n        };\n    }\n\n    function hasDirectSubscribersFor( message ) {\n        var topic = String( message ),\n            found = Boolean(Object.prototype.hasOwnProperty.call( messages, topic ) && hasKeys(messages[topic]));\n\n        return found;\n    }\n\n    function messageHasSubscribers( message ){\n        var topic = String( message ),\n            found = hasDirectSubscribersFor(topic) || hasDirectSubscribersFor(ALL_SUBSCRIBING_MSG),\n            position = topic.lastIndexOf( '.' );\n\n        while ( !found && position !== -1 ){\n            topic = topic.substr( 0, position );\n            position = topic.lastIndexOf( '.' );\n            found = hasDirectSubscribersFor(topic);\n        }\n\n        return found;\n    }\n\n    function publish( message, data, sync, immediateExceptions ){\n        message = (typeof message === 'symbol') ? message.toString() : message;\n\n        var deliver = createDeliveryFunction( message, data, immediateExceptions ),\n            hasSubscribers = messageHasSubscribers( message );\n\n        if ( !hasSubscribers ){\n            return false;\n        }\n\n        if ( sync === true ){\n            deliver();\n        } else {\n            setTimeout( deliver, 0 );\n        }\n        return true;\n    }\n\n    /**\n     * Publishes the message, passing the data to it's subscribers\n     * @function\n     * @alias publish\n     * @param { String } message The message to publish\n     * @param {} data The data to pass to subscribers\n     * @return { Boolean }\n     */\n    PubSub.publish = function( message, data ){\n        return publish( message, data, false, PubSub.immediateExceptions );\n    };\n\n    /**\n     * Publishes the message synchronously, passing the data to it's subscribers\n     * @function\n     * @alias publishSync\n     * @param { String } message The message to publish\n     * @param {} data The data to pass to subscribers\n     * @return { Boolean }\n     */\n    PubSub.publishSync = function( message, data ){\n        return publish( message, data, true, PubSub.immediateExceptions );\n    };\n\n    /**\n     * Subscribes the passed function to the passed message. Every returned token is unique and should be stored if you need to unsubscribe\n     * @function\n     * @alias subscribe\n     * @param { String } message The message to subscribe to\n     * @param { Function } func The function to call when a new message is published\n     * @return { String }\n     */\n    PubSub.subscribe = function( message, func ){\n        if ( typeof func !== 'function'){\n            return false;\n        }\n\n        message = (typeof message === 'symbol') ? message.toString() : message;\n\n        // message is not registered yet\n        if ( !Object.prototype.hasOwnProperty.call( messages, message ) ){\n            messages[message] = {};\n        }\n\n        // forcing token as String, to allow for future expansions without breaking usage\n        // and allow for easy use as key names for the 'messages' object\n        var token = 'uid_' + String(++lastUid);\n        messages[message][token] = func;\n\n        // return token for unsubscribing\n        return token;\n    };\n\n    PubSub.subscribeAll = function( func ){\n        return PubSub.subscribe(ALL_SUBSCRIBING_MSG, func);\n    };\n\n    /**\n     * Subscribes the passed function to the passed message once\n     * @function\n     * @alias subscribeOnce\n     * @param { String } message The message to subscribe to\n     * @param { Function } func The function to call when a new message is published\n     * @return { PubSub }\n     */\n    PubSub.subscribeOnce = function( message, func ){\n        var token = PubSub.subscribe( message, function(){\n            // before func apply, unsubscribe message\n            PubSub.unsubscribe( token );\n            func.apply( this, arguments );\n        });\n        return PubSub;\n    };\n\n    /**\n     * Clears all subscriptions\n     * @function\n     * @public\n     * @alias clearAllSubscriptions\n     */\n    PubSub.clearAllSubscriptions = function clearAllSubscriptions(){\n        messages = {};\n    };\n\n    /**\n     * Clear subscriptions by the topic\n     * @function\n     * @public\n     * @alias clearAllSubscriptions\n     * @return { int }\n     */\n    PubSub.clearSubscriptions = function clearSubscriptions(topic){\n        var m;\n        for (m in messages){\n            if (Object.prototype.hasOwnProperty.call(messages, m) && m.indexOf(topic) === 0){\n                delete messages[m];\n            }\n        }\n    };\n\n    /**\n       Count subscriptions by the topic\n     * @function\n     * @public\n     * @alias countSubscriptions\n     * @return { Array }\n    */\n    PubSub.countSubscriptions = function countSubscriptions(topic){\n        var m;\n        // eslint-disable-next-line no-unused-vars\n        var token;\n        var count = 0;\n        for (m in messages) {\n            if (Object.prototype.hasOwnProperty.call(messages, m) && m.indexOf(topic) === 0) {\n                for (token in messages[m]) {\n                    count++;\n                }\n                break;\n            }\n        }\n        return count;\n    };\n\n\n    /**\n       Gets subscriptions by the topic\n     * @function\n     * @public\n     * @alias getSubscriptions\n    */\n    PubSub.getSubscriptions = function getSubscriptions(topic){\n        var m;\n        var list = [];\n        for (m in messages){\n            if (Object.prototype.hasOwnProperty.call(messages, m) && m.indexOf(topic) === 0){\n                list.push(m);\n            }\n        }\n        return list;\n    };\n\n    /**\n     * Removes subscriptions\n     *\n     * - When passed a token, removes a specific subscription.\n     *\n\t * - When passed a function, removes all subscriptions for that function\n     *\n\t * - When passed a topic, removes all subscriptions for that topic (hierarchy)\n     * @function\n     * @public\n     * @alias subscribeOnce\n     * @param { String | Function } value A token, function or topic to unsubscribe from\n     * @example // Unsubscribing with a token\n     * var token = PubSub.subscribe('mytopic', myFunc);\n     * PubSub.unsubscribe(token);\n     * @example // Unsubscribing with a function\n     * PubSub.unsubscribe(myFunc);\n     * @example // Unsubscribing from a topic\n     * PubSub.unsubscribe('mytopic');\n     */\n    PubSub.unsubscribe = function(value){\n        var descendantTopicExists = function(topic) {\n                var m;\n                for ( m in messages ){\n                    if ( Object.prototype.hasOwnProperty.call(messages, m) && m.indexOf(topic) === 0 ){\n                        // a descendant of the topic exists:\n                        return true;\n                    }\n                }\n\n                return false;\n            },\n            isTopic    = typeof value === 'string' && ( Object.prototype.hasOwnProperty.call(messages, value) || descendantTopicExists(value) ),\n            isToken    = !isTopic && typeof value === 'string',\n            isFunction = typeof value === 'function',\n            result = false,\n            m, message, t;\n\n        if (isTopic){\n            PubSub.clearSubscriptions(value);\n            return;\n        }\n\n        for ( m in messages ){\n            if ( Object.prototype.hasOwnProperty.call( messages, m ) ){\n                message = messages[m];\n\n                if ( isToken && message[value] ){\n                    delete message[value];\n                    result = value;\n                    // tokens are unique, so we can just stop here\n                    break;\n                }\n\n                if (isFunction) {\n                    for ( t in message ){\n                        if (Object.prototype.hasOwnProperty.call(message, t) && message[t] === value){\n                            delete message[t];\n                            result = true;\n                        }\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n}));\n","/* \n(The MIT License)\nCopyright (c) 2014-2021 Halász Ádám <adam@aimform.com>\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\n//  Unique Hexatridecimal ID Generator\n// ================================================\n\n//  Dependencies\n// ================================================\nvar pid = typeof process !== 'undefined' && process.pid ? process.pid.toString(36) : '' ;\nvar address = '';\nif(typeof __webpack_require__ !== 'function'){\n    var mac = '', networkInterfaces = require('os').networkInterfaces();\n    loop:\n    for(let interface_key in networkInterfaces){\n        const networkInterface = networkInterfaces[interface_key];\n        const length = networkInterface.length;\n        for(var i = 0; i < length; i++){\n            if(networkInterface[i] !== undefined && networkInterface[i].mac && networkInterface[i].mac != '00:00:00:00:00:00'){\n                mac = networkInterface[i].mac; break loop;\n            }\n        }\n    }\n    address = mac ? parseInt(mac.replace(/\\:|\\D+/gi, '')).toString(36) : '' ;\n} \n\n//  Exports\n// ================================================\nmodule.exports = module.exports.default = function(prefix, suffix){ return (prefix ? prefix : '') + address + pid + now().toString(36) + (suffix ? suffix : ''); }\nmodule.exports.process = function(prefix, suffix){ return (prefix ? prefix : '') + pid + now().toString(36) + (suffix ? suffix : ''); }\nmodule.exports.time    = function(prefix, suffix){ return (prefix ? prefix : '') + now().toString(36) + (suffix ? suffix : ''); }\n\n//  Helpers\n// ================================================\nfunction now(){\n    var time = Date.now();\n    var last = now.last || time;\n    return now.last = time > last ? time : last + 1;\n}\n","import PubSub from 'pubsub-js'\nimport shipFactory from './shipFactory'\nimport gameBoardFactory from './gameboardFactory'\nimport playerFactory from './playerFactory'\n\nexport default (() => {\n  let playerBoard = null\n  let computerBoard = null\n  let player = null\n  let computer = null\n\n  const prepareBoards = (msg, shipsArray) => {\n    playerBoard = gameBoardFactory(10, shipFactory)\n    computerBoard = gameBoardFactory(10, shipFactory)\n\n    shipsArray.forEach((ship) => {\n      // Format coords for placeShip method\n      const formattedShip = ship.map((coords) => {\n        return [parseInt(coords[0]), parseInt(coords[1])]\n      })\n      playerBoard.placeShip(formattedShip)\n      computerBoard.placeShip(formattedShip)\n    })\n\n    PubSub.publish('changedPlayerboard', playerBoard.getBoardStatus())\n    PubSub.publish('changedComputerboard', computerBoard.getBoardStatus())\n  }\n\n  const startNewGame = (msg, playerName) => {\n    player = playerFactory(computerBoard, playerName)\n    computer = playerFactory(playerBoard)\n  }\n\n  const evaluateField = (msg, coords) => {\n    player.chooseField(coords)\n    PubSub.publish('changedComputerboard', computerBoard.getBoardStatus())\n    if (computerBoard.areAllSupplied()) {\n      PubSub.publish('gameFinished', player.getName())\n    }\n\n    computer.chooseField()\n    PubSub.publish('changedPlayerboard', playerBoard.getBoardStatus())\n    if (playerBoard.areAllSupplied()) {\n      PubSub.publish('gameFinished', computer.getName())\n    }\n  }\n\n  const init = () => {\n    PubSub.subscribe('shipsPlaced', prepareBoards)\n    PubSub.subscribe('startClicked', startNewGame)\n    PubSub.subscribe('fieldClicked', evaluateField)\n  }\n\n  return { init }\n})()\n","import PubSub from 'pubsub-js'\nimport uniqid from 'uniqid'\n\nexport default (function () {\n  const body = document.querySelector('body')\n\n  const heading = document.createElement('h1')\n  const container = document.createElement('div')\n  const dragContainer = document.createElement('div')\n  const boardsContainer = document.createElement('div')\n  const board1Container = document.createElement('div')\n  const board2Container = document.createElement('div')\n  const playerName = document.createElement('h2')\n  const computerName = document.createElement('h2')\n  const board1 = document.createElement('div')\n  const board2 = document.createElement('div')\n  const form = document.createElement('form')\n  const nameLabel = document.createElement('label')\n  const nameInput = document.createElement('input')\n  const startButton = document.createElement('button')\n  const finishMessage = document.createElement('p')\n  const playAgainButton = document.createElement('button')\n\n  let draggedShipSections = null\n  let draggedShipCopy = null\n  let shipVerticalPosition = false\n  let shipsPlacedArray = []\n\n  const createBoardFields = (size, board) => {\n    for (let i = 0; i < size; i++) {\n      for (let j = 0; j < size; j++) {\n        const field = document.createElement('div')\n        field.classList.add('field')\n        field.dataset.coords = `${i}${j}`\n        board.appendChild(field)\n      }\n    }\n  }\n\n  // Check if element would wrap (what is unwanted)\n  const checkWrap = (targetEl) => {\n    const coords = targetEl.dataset.coords\n    const coord = shipVerticalPosition\n      ? parseInt(coords[0])\n      : parseInt(coords[1])\n\n    return parseInt(draggedShipSections) + coord > 10 ? true : false\n  }\n\n  // Check if element would be placed on blocked\n  // field. (what is unwanted)\n  const checkBlocked = (targetEl) => {\n    let blocked = false\n    const fields = getFields(targetEl)\n\n    fields.forEach((field) => {\n      if (field.classList.contains('blocked')) {\n        blocked = true\n      }\n    })\n    return blocked\n  }\n\n  // Returns all fields depending on number of global var sections\n  // and if global var elementVerticalPosition is true or false\n  const getFields = (targetEl) => {\n    let fields = []\n    let coords = parseInt(targetEl.dataset.coords)\n\n    const iterator = shipVerticalPosition ? 10 : 1\n\n    for (let i = draggedShipSections; i > 0; i--) {\n      const field = document.querySelector(\n        `[data-coords='${coords < 10 ? 0 : ''}${coords}']`\n      )\n\n      if (field === null) {\n        break\n      }\n\n      fields.push(field)\n      // Prepare selection of field under current field\n      coords += iterator\n    }\n    return fields\n  }\n\n  // Add color to fields  to highlight them\n  // where mouse is and fields on right to mouse\n  const highlightFields = (ev) => {\n    ev.preventDefault()\n\n    if (checkWrap(ev.target) || checkBlocked(ev.target)) {\n      return\n    }\n\n    const fields = getFields(ev.target)\n    fields.forEach((field) => field.classList.add('highlight'))\n  }\n\n  // For change from elementVerticalPosition to horizontal or otherway\n  function whitenAllFields() {\n    const fields = document.querySelectorAll('.field')\n    fields.forEach((field) => {\n      field.classList.remove('highlight')\n    })\n  }\n\n  // Remove color from previously highlighted\n  // fields when mouse goes somewhere else\n  function whitenFields(ev) {\n    ev.preventDefault()\n\n    const fields = getFields(ev.target)\n    fields.forEach((field) => field.classList.remove('highlight'))\n  }\n\n  const addDragDropListeners = (board) => {\n    const fields = Array.from(board.children)\n    fields.forEach((field) => {\n      field.addEventListener('dragleave', whitenFields)\n      field.addEventListener('dragover', highlightFields)\n      field.addEventListener('drop', placeShip)\n    })\n  }\n\n  const removeDragDropListeners = (board) => {\n    const fields = Array.from(board.children)\n    fields.forEach((field) => {\n      field.removeEventListener('dragleave', whitenFields)\n      field.removeEventListener('dragover', highlightFields)\n      field.removeEventListener('drop', placeShip)\n    })\n  }\n\n  const addClickListeners = (board) => {\n    const fields = Array.from(board.children)\n    fields.forEach((field) => {\n      field.addEventListener('click', publishCoords)\n    })\n  }\n\n  const publishCoords = (event) => {\n    const coords = event.target.dataset.coords\n    const coordsArray = [parseInt(coords[0]), parseInt(coords[1])]\n    PubSub.publish('fieldClicked', coordsArray)\n  }\n\n  const makeShipDraggable = (ship) => {\n    ship.draggable = 'true'\n    ship.ondragstart = (ev) => {\n      var img = new Image()\n      ev.dataTransfer.setDragImage(img, 0, 0)\n      ev.dataTransfer.setData('text', ev.target.id)\n      ev.dataTransfer.effectAllowed = 'all'\n      draggedShipSections = parseInt(ev.target.dataset.sections)\n\n      draggedShipCopy = ship.cloneNode(true)\n      draggedShipCopy.style.position = 'absolute'\n      draggedShipCopy.style.transformOrigin = 'top left'\n\n      document.body.append(draggedShipCopy)\n\n      document.addEventListener('drag', (ev) => {\n        draggedShipCopy.style.top = ev.pageY + 10 + 'px'\n        draggedShipCopy.style.left = ev.pageX + 'px'\n      })\n\n      document.addEventListener('dragend', () => {\n        draggedShipCopy.remove()\n      })\n    }\n\n    // If ctrl key is pressed and hold\n    // then display draggedElementCopy elementVerticalPosition\n    ship.ondrag = (ev) => {\n      if (ev.ctrlKey) {\n        draggedShipCopy.style.transform = 'rotate(90deg)'\n        if (shipVerticalPosition === false) {\n          shipVerticalPosition = true\n          // Without whitenAllFields for some time elementVerticalPosition\n          // highlights are displayed and horizontal\n          whitenAllFields()\n        }\n      } else {\n        draggedShipCopy.style.transform = ''\n        if (shipVerticalPosition === true) {\n          shipVerticalPosition = false\n          // Without whitenAllFields for some time elementVerticalPosition\n          // highlights are displayed and horizontal\n          whitenAllFields()\n        }\n      }\n    }\n  }\n\n  // Color all appropriate fields after placing on valid spot\n  const placeShip = (ev) => {\n    ev.preventDefault()\n    if (checkWrap(ev.target) || checkBlocked(ev.target)) {\n      return\n    }\n\n    let shipCoords = []\n\n    const fields = getFields(ev.target)\n\n    fields.forEach((field) => {\n      field.classList.add('placed')\n\n      const coords = parseInt(field.dataset.coords)\n      blockFieldsAround(coords)\n\n      shipCoords.push(field.dataset.coords)\n\n      // Remove Listeners so that here no Element can be dropped anymore\n      field.removeEventListener('dragover', highlightFields)\n      field.removeEventListener('drop', placeShip)\n    })\n\n    // Remove original element and draggedElementCopy\n    const data = ev.dataTransfer.getData('text')\n    document.getElementById(data).remove()\n    draggedShipCopy.remove()\n\n    // Save coords of currently placed ship\n    // for later passing to PubSub\n    shipsPlacedArray.push(shipCoords)\n\n    // If all ships are dragged and dropped\n    if (!dragContainer.hasChildNodes()) {\n      form.style.display = 'flex'\n      PubSub.publish('shipsPlaced', shipsPlacedArray)\n      removeDragDropListeners(board1)\n      dragContainer.style.display = 'none'\n    }\n  }\n\n  // Block all fields around one specified field\n  const blockFieldsAround = (coordsEl) => {\n    let blockedCoords = []\n\n    // Block fields on bottom side\n    blockedCoords.push(`${coordsEl + 9}`)\n    blockedCoords.push(`${coordsEl + 10}`)\n    blockedCoords.push(`${coordsEl + 11}`)\n\n    // Block fields on top side\n    blockedCoords.push(`${coordsEl - 9}`)\n    blockedCoords.push(`${coordsEl - 10}`)\n    blockedCoords.push(`${coordsEl - 11}`)\n\n    // Block fields on left and right side\n    blockedCoords.push(`${coordsEl - 1}`)\n    blockedCoords.push(`${coordsEl + 1}`)\n\n    blockedCoords.forEach((coords) => {\n      const el = document.querySelector(\n        `[data-coords='${coords < 10 ? 0 : ''}${coords}']`\n      )\n      if (el !== null) {\n        el.classList.add('blocked')\n      }\n    })\n  }\n\n  const createDragShips = (name, amount, sections) => {\n    for (let i = 0; i < amount; i++) {\n      const dragShip = document.createElement('div')\n      dragShip.id = uniqid()\n      dragShip.dataset.sections = sections\n      dragShip.classList.add(`ship-${name}`)\n      makeShipDraggable(dragShip)\n      dragContainer.appendChild(dragShip)\n    }\n  }\n\n  const createDragZone = () => {\n    dragContainer.id = 'drag-container'\n\n    createDragShips('big', 1, 5)\n    createDragShips('large', 2, 4)\n    createDragShips('medium', 3, 3)\n    createDragShips('small', 2, 2)\n\n    return dragContainer\n  }\n\n  const createBoards = (boardSize) => {\n    board1Container.classList.add('board-container')\n    board2Container.classList.add('board-container')\n\n    board1Container.appendChild(playerName)\n    board2Container.appendChild(computerName)\n\n    board1Container.appendChild(board1)\n    board2Container.appendChild(board2)\n\n    boardsContainer.appendChild(board1Container)\n    boardsContainer.appendChild(board2Container)\n\n    playerName.classList.add('name')\n    computerName.classList.add('name')\n\n    boardsContainer.id = 'boards-container'\n    board1.id = 'board-1'\n    board2.id = 'board-2'\n\n    createBoardFields(boardSize, board1)\n    createBoardFields(boardSize, board2)\n\n    return boardsContainer\n  }\n\n  const resetBoard = (board) => {\n    const fields = Array.from(board.children)\n    fields.forEach((field) => {\n      field.innerHTML = ''\n      field.classList.remove('highlight', 'blocked', 'placed')\n    })\n  }\n\n  const startGame = (event) => {\n    // If input makes sense the if below is executed\n    if (form.checkValidity()) {\n      // preventDefault() prevents page from relaoding\n      event.preventDefault()\n      PubSub.publish('startClicked', nameInput.value)\n      form.style.display = 'none'\n      board2Container.style.display = 'block'\n      playerName.innerHTML = `${nameInput.value}'s board`\n      computerName.innerHTML = `Computer's board`\n      addClickListeners(board2)\n    }\n  }\n\n  const createForm = () => {\n    form.appendChild(nameLabel)\n    form.appendChild(nameInput)\n    form.appendChild(startButton)\n\n    nameLabel.innerHTML = 'Name: '\n    nameInput.placeholder = 'Enter your name'\n    nameInput.required = true\n\n    startButton.innerHTML = 'Start new Game'\n\n    form.addEventListener('submit', startGame)\n    return form\n  }\n\n  const renderPlacingShips = () => {\n    // reset necessary stuff\n    resetBoard(board1)\n    addDragDropListeners(board1)\n    resetBoard(board2)\n    playerName.innerHTML = ''\n    shipsPlacedArray = []\n\n    // Hide and show necessary stuff\n    dragContainer.style.display = 'block'\n    container.insertBefore(createDragZone(), container.firstChild)\n    board2Container.style.display = 'none'\n    finishMessage.style.display = 'none'\n    playAgainButton.style.display = 'none'\n  }\n\n  const init = (boardSize) => {\n    container.id = 'container'\n\n    container.appendChild(createDragZone())\n    container.appendChild(createBoards(boardSize))\n    container.appendChild(createForm())\n    container.appendChild(finishMessage)\n    container.appendChild(playAgainButton)\n\n    body.appendChild(heading)\n    body.appendChild(container)\n\n    addDragDropListeners(board1)\n\n    heading.innerHTML = 'Careship'\n\n    board2Container.style.display = 'none'\n\n    finishMessage.id = 'finish-message'\n    finishMessage.style.display = 'none'\n\n    playAgainButton.addEventListener('click', renderPlacingShips)\n    playAgainButton.innerHTML = 'Play Again!'\n    playAgainButton.style.display = 'none'\n\n    PubSub.subscribe('changedPlayerboard', updatePlayerboard)\n    PubSub.subscribe('changedComputerboard', updateComputerboard)\n    PubSub.subscribe('gameFinished', renderFinishDisplay)\n  }\n\n  const updatePlayerboard = (msg, boardDetails) => {\n    // Hier kommt ein 2D-Array rein mit undefined/object/true/false\n    // Erstmal mit \"o\" \"t\" \"f\" rendern - später besser rendern\n    for (let i = 0; i < boardDetails.length; i++) {\n      for (let j = 0; j < boardDetails.length; j++) {\n        const field = board1.querySelector(`[data-coords='${i}${j}']`)\n        if (typeof boardDetails[i][j] === 'object') {\n          field.innerHTML = 'ship'\n        }\n        if (boardDetails[i][j] === false) {\n          field.innerHTML = 'no!'\n        }\n        if (boardDetails[i][j] === true) {\n          field.innerHTML = 'yes!'\n        }\n      }\n    }\n  }\n\n  const updateComputerboard = (msg, boardDetails) => {\n    // Hier kommt ein 2D-Array rein mit undefined/object/true/false\n    // Erstmal mit \"o\" \"t\" \"f\" rendern - später besser rendern\n    for (let i = 0; i < boardDetails.length; i++) {\n      for (let j = 0; j < boardDetails.length; j++) {\n        const field = board2.querySelector(`[data-coords='${i}${j}']`)\n        if (boardDetails[i][j] === false) {\n          field.innerHTML = 'no!'\n        }\n        if (boardDetails[i][j] === true) {\n          field.innerHTML = 'yes'\n        }\n      }\n    }\n  }\n\n  const removeFieldListeners = (board) => {\n    const fields = Array.from(board.children)\n    fields.forEach((field) => {\n      field.removeEventListener('click', publishCoords)\n    })\n  }\n\n  const renderFinishDisplay = (msg, name) => {\n    finishMessage.innerHTML = `${name} has supplied all ships!`\n    finishMessage.style.display = 'block'\n    removeFieldListeners(board2)\n    nameInput.value = ''\n    playAgainButton.style.display = 'inline-block'\n  }\n\n  return { init }\n})()\n","export default function gameBoardFactory(size, shipFactory) {\n  let boardStatus = []\n  let ships = []\n\n  initBoardStatus()\n\n  // Create a ship and put it on given coordinates\n  const placeShip = (coords) => {\n    const shipLen = coords.length\n    const index = ships.push(shipFactory(shipLen)) - 1\n\n    coords.forEach((coord) => {\n      boardStatus[coord[0]][coord[1]] = ships[index]\n    })\n  }\n\n  const receiveGift = (coordPair) => {\n    let fieldValue = boardStatus[coordPair[0]][coordPair[1]]\n\n    // Check if fieldValue has ship\n    if (typeof fieldValue === 'object') {\n      fieldValue.sendGift()\n      fieldValue = true\n    }\n\n    // Check if fieldValue is empty\n    if (fieldValue === undefined) {\n      fieldValue = false\n    }\n\n    boardStatus[coordPair[0]][coordPair[1]] = fieldValue\n  }\n\n  const areAllSupplied = () => {\n    // If you find a ship which isn't supplied return false\n    for (let i = 0; i < ships.length; i++) {\n      if (!ships[i].isSupplied()) {\n        return false\n      }\n    }\n\n    // Otherwise return true\n    return true\n  }\n\n  const getBoardStatus = () => boardStatus\n\n  function initBoardStatus() {\n    for (let i = 0; i < size; i++) {\n      boardStatus[i] = new Array(size).fill(undefined)\n    }\n  }\n\n  return { placeShip, receiveGift, areAllSupplied, getBoardStatus }\n}\n","export default function playerFactory(gameBoard, name = 'Computer') {\n  const chooseField = (coords = generateCoords()) => {\n    gameBoard.receiveGift(coords)\n    return gameBoard.getBoardStatus()\n  }\n\n  const generateCoords = () => {\n    // When length is 10 a random number between 0-9 should be generated\n    const arr = gameBoard.getBoardStatus()\n    const range = arr.length\n\n    let coord1\n    let coord2\n\n    // Assign coordinates which have not been assigned before\n    // This could be written more performantly\n    do {\n      coord1 = Math.floor(Math.random() * range)\n      coord2 = Math.floor(Math.random() * range)\n    } while ((arr[coord1][coord2] !== false || arr[coord1][coord2]) !== true)\n\n    return [coord1, coord2]\n  }\n\n  const getName = () => {\n    return name\n  }\n\n  return { getName, chooseField }\n}\n","export default function shipFactory(len) {\n  const suppliedSections = new Array(len).fill(false)\n\n  // Update supply status of a ship\n  const sendGift = () => {\n    suppliedSections.push(true)\n    suppliedSections.shift()\n  }\n\n  // If whole ship is supllied with gifts return true\n  const isSupplied = () => {\n    return suppliedSections.every((el) => el === true)\n  }\n\n  return { sendGift, isSupplied }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","import gameLogicModule from './gameLogic'\nimport gameViewModule from './gameView'\n\ngameViewModule.init(10)\ngameLogicModule.init()\n\n// Next Steps:\n\n/*\n   So wie es jetzt ist könnte ich mal Commit machen\n   \n   Boards verhauts gerade ziemlich noch wenn ich rauszoome\n\n   Was gerade Problem: auch bei Klick auf bereits vorhandenes Feld macht\n   Computer einen Zug. Wenn auf bereits gecklicktes Feld von Player geklicked wird\n   sollte eig. nichts passieren oder?\n\n   Wie der Code in gameView strukturiert ist gefällt mir teilweise gar nicht:\n   z.B. paar Dom-Element ganz oben erstellt, paar Dom-Elemente in init usw...\n   Vielleicht Alle ganz oben? Und in init nur Funktionen aufrufen?\n   */\n"],"sourceRoot":""}